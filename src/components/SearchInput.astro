---

---

<section class="max-w-3xl mx-auto px-3">
  <div class="searchBoxContainer">
    <input type="search" id="searchBox" required min="2" max="24" class="searchBox w-full px-2 py-1 bg-bg-terciary text-text-terciary border-border" placeholder="Search..." data-test="search-input" />
    <p class="flex my-2 text-center">TIP: use '#' to search by tag (e.g. #docker)</p>
  </div>
</section>
<p id="searchReadout" class="my-8"></p>
<div id="searchResults" class="searchResults lg:pl-8"></div>
<script>
  import DOMPurify from "dompurify";
  import Fuse from "fuse.js";

  interface ISearchData {
    slug: string;
    title: string;
    description: string;
    date: string;
    tags: string;
    body: string;
  }

  const BODY_LENGTH = 100;
  let PREV_QUERY: String | undefined;
  let SEARCH_DATA: ISearchData[];
  let FUSE_INSTANCE: any;
  const FUSE_OPTIONS = {
    includeScore: true,
    shouldSort: true,
    threshold: 0.4,
    keys: [
      {
        name: "title",
        weight: 1,
      },
      {
        name: "description",
        weight: 0.75,
      },
      {
        name: "body",
        weight: 0.5,
      },
    ],
  };

  const searchResults = {
    element: document.getElementById("searchResults") as HTMLElement,
    searchReadout: document.getElementById("searchReadout") as HTMLElement,
    show() {
      this.element.style.display = "block";
    },
    hide() {
      this.element.style.display = "none";
    },
    clear() {
      while (this.element.firstChild) this.element.removeChild(this.element.firstChild);
    },
    showEmpty(query?: string) {
      let searchResultItem = document.createElement("div");
      searchResultItem.className = "searchResultItem";
      searchResultItem.innerHTML = `No results found for query ${query ?? ""}`;
      this.element.append(searchResultItem);
    },
    add(result: { item: ISearchData }) {
      console.log(result);
      let resultPage = document.createElement("div");
      resultPage.style.marginBottom = "2rem";
      resultPage.className = "searchResultItem";

      let resultTitle = document.createElement("a");
      resultTitle.className = "searchResultTitle";
      resultTitle.href = `/${result.item.slug}`;
      resultTitle.innerHTML = result.item.title;
      resultPage.append(resultTitle);

      let resultBody = document.createElement("div");
      resultBody.className = "searchResultBody";
      resultBody.innerHTML = (result.item.description ?? result.item.body).substring(0, BODY_LENGTH);
      resultPage.append(resultBody);
      this.element.append(resultPage);
    },
    updateMetadata(query?: string) {
      document.title = query ? `Search results for “${query}”` : "Search the Blog";
      this.searchReadout.textContent = query ? `Search results for “${query}”` : "";
    },
    updateHistory(query?: string) {
      if (query) {
        const url = new URL(window.location.href);
        url.searchParams.set("query", query);
        window.history.replaceState(null, "", url);
      }
    },
  };

  async function search(query?: string): Promise<any[] | undefined> {
    if (query?.length === 0) return;
    if (!SEARCH_DATA) {
      try {
        const res = await fetch("/search/search-index.json");
        if (!res.ok) {
          throw new Error("Something went wrong… please try again");
        }
        const data = await res.json();
        SEARCH_DATA = data;
      } catch (e) {
        console.error(e);
      }
    }
    if (SEARCH_DATA && query?.startsWith("#")) {
      const tag = query?.substring(1)?.toLocaleLowerCase();
      return SEARCH_DATA.filter((item) => item.tags.includes(tag))
        .sort((a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf())
        .map((item) => {
          return { item };
        });
    } else {
      if (SEARCH_DATA && !FUSE_INSTANCE) {
        FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
      }
      if (!FUSE_INSTANCE) return;
      return FUSE_INSTANCE.search(query)?.sort((a: any, b: any) => a.refIndex - b.refIndex);
    }
  }

  async function triggerSearch(query: string) {
    // Only trigger a search when 2 chars. at least have been provided and the query has changed
    if (query.length < 2) {
      searchResults.hide();
      return;
    } else if (PREV_QUERY === query) {
      return;
    }
    // Display search results
    PREV_QUERY = query;
    searchResults.clear();
    const searchResultList = await search(query);
    if ((searchResultList ?? []).length > 0) {
      (searchResultList ?? []).forEach((result: any) => searchResults.add(result));
      searchResults.updateMetadata(query);
      searchResults.show();
    } else {
      searchResults.clear();
      searchResults.showEmpty();
    }
  }

  const searchBox = document.getElementById("searchBox") as HTMLInputElement;
  searchBox.addEventListener("input", () => {
    const query = DOMPurify.sanitize(searchBox.value);
    triggerSearch(query);
    searchResults.updateHistory(query);
  });

  window.addEventListener("DOMContentLoaded", () => {
    const query = DOMPurify.sanitize(new URLSearchParams(window.location.search).get("query") ?? "");
    triggerSearch(query);
    searchBox.value = query;
    searchBox.focus();
  });
</script>
