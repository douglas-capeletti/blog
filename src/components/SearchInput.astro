---

---

<!-- @ts-nocheck -->
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/mark.js/8.11.1/mark.min.js" integrity="sha512-5CYOlHXGh6QpOFA/TeTylKLWfB3ftPsde7AnmhuitiTX4K5SqCLBeKro6sPS8ilsz1Q4NRx3v8Ko2IBiszzdww==" crossorigin="anonymous" referrerpolicy="no-referrer"
></script>
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/lunr.js/2.3.9/lunr.min.js" integrity="sha512-4xUl/d6D6THrAnXAwGajXkoWaeMNwEKK4iNfq5DotEbLPAfk6FSxSP3ydNxqDgCw1c/0Z1Jg6L8h2j+++9BZmg==" crossorigin="anonymous" referrerpolicy="no-referrer"
></script>

<section class="max-w-3xl mx-auto px-3">
  <div client:load class="searchBoxContainer">
    <input type="text" id="searchBox" class="searchBox w-full px-2 py-1" placeholder="Search..." data-test="search-input" />
  </div>
</section>

<div id="searchResults" class="searchResults lg:pl-8"></div>

<script>
  // @ts-nocheck
  let lunrIndex;
  let lunrResult;
  let pagesIndex;
  let prevQuery;
  const MAX_PAGES = 10;
  const BODY_LENGTH = 100;


  const searchResults = {
    element: document.querySelector("#searchResults") as HTMLElement,
    show() {
      this.element.style.display = "block"; 
    },
    hide() {
      this.element.style.display = "none";
    },
    clear() {
      while (this.element.firstChild) this.element.removeChild(this.element.firstChild);
    },
    showEmpty(query) {
      let resultPage = document.createElement("div");
      resultPage.className = "searchResultPage";
      resultPage.innerHTML = 'No results found for query "' + query + '"';
      this.element.append(resultPage);
    },
    add(result, metadata){
      let resultPage = document.createElement("div");
      resultPage.className = "searchResultPage";
      let matchPosition = metadata[Object.keys(metadata)[0]].body.position[0][0];
      let bodyStartPosition = matchPosition - BODY_LENGTH / 2 > 0 ? matchPosition - BODY_LENGTH / 2 : 0;

      let resultTitle = document.createElement("a");
      resultTitle.className = "searchResultTitle";
      resultTitle.href = `/${result.category}/${result.slug}`;
      resultTitle.innerHTML = result.title;
      resultPage.append(resultTitle);

      let resultBody = document.createElement("div");
      resultBody.className = "searchResultBody";
      resultBody.innerHTML = result.body.substr(bodyStartPosition, BODY_LENGTH);
      resultPage.append(resultBody);
      console.log(result)
      this.element.append(resultPage);
    }
    
  }

  const bigramTokeniser = (obj, metadata) => {
    if (obj == null || obj == undefined) {
      return [];
    }

    let str = obj.toString().trim().toLowerCase();
    let tokens = [];

    for (let i = 0; i <= str.length - 2; i++) {
      let tokenMetadata = lunr.utils.clone(metadata) || {};
      tokenMetadata["position"] = [i, i + 2];
      tokenMetadata["index"] = tokens.length;
      tokens.push(new lunr.Token(str.slice(i, i + 2), tokenMetadata));
    }

    return tokens;
  };

  const queryNgramSeparator = (query) => {
    const str = query.toString().trim().toLowerCase();
    const tokens = [];

    for (let i = 0; i <= str.length - 2; i++) {
      tokens.push(str.slice(i, i + 2));
    }

    return tokens.join(" ");
  };

  const initLunr = () => {
    let request = new XMLHttpRequest();
    request.open("GET", "/search-index.json", true);
    request.onload = function () {
      if (this.status >= 200 && this.status < 400) {
        pagesIndex = JSON.parse(this.response);
        lunrIndex = lunr(function () {
          this.tokenizer = bigramTokeniser;
          this.pipeline.reset();
          this.ref("slug");
          this.field("title", { boost: 10 });
          this.field("body");
          this.metadataWhitelist = ["position"];
          pagesIndex.forEach((page) => {
            this.add(page);
          }, this);
        });
      }
    };
    request.onerror = function () {
      console.error("connection error");
    };
    request.send();
  };

  const search = (query: string) => {
    lunrResult = lunrIndex?.search(queryNgramSeparator(query));
    return lunrResult.map((result) => {
      return pagesIndex?.filter((page) => {
        return page.slug === result.ref;
      })[0];
    });
  };

  const initUI = () => {
    const searchBox = document.querySelector("#searchBox");
    if (searchBox === null) {
      return;
    }
    function triggerFunction(event) {
      let query = event.currentTarget.value;

      // Only trigger a search when 2 chars. at least have been provided and the query has changed
      if (query.length < 2) {
        searchResults.hide();
        return;
      } else if (prevQuery === query) {
        return;
      }
      // Display search results
      prevQuery = query;
      renderResults(search(query));
      searchResults.show();
    }
    searchBox.addEventListener("keyup", triggerFunction);
    searchBox.addEventListener("focus", triggerFunction);
  };

  const renderResults = (results: Object[]) => {
    const searchBox = document.querySelector("#searchBox") as HTMLInputElement;
    const query = searchBox.value;
    // Clear search result
    searchResults.clear();
    // Show message when results is empty
    if (!results.length) {
      searchResults.showEmpty();
      return;
    }
    // Only show the ten first results
    let instance = new Mark(searchResults.element);
    results.slice(0, MAX_PAGES).forEach((result, idx) => {
      let metadata = lunrResult[idx].matchData.metadata;
      searchResults.add(result, metadata)
      instance.mark(query);
    });
  };

  initLunr();
  initUI();
</script>

<script>
  const search = document.getElementById("searchBox") as HTMLInputElement;
  search.value = decodeURI(document.location.search?.substring(1) ?? "");
  setTimeout(() => search.focus(), 500);
</script>
